/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Uint128, UncheckedDenom, InstantiateMsg, PossibleShit, ExecuteMsg, Binary, AssetUnchecked, Cw20ReceiveMsg, QueryMsg, Addr, CheckedDenom, Config, Boolean, NullableUint128, NullableArrayOfPossibleShit } from "./ShitStrap.types";
export interface ShitStrapMessage {
  contractAddress: string;
  sender: string;
  shitStrap: ({
    shit
  }: {
    shit: AssetUnchecked;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  flush: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  refundShitter: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class ShitStrapMessageComposer implements ShitStrapMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.shitStrap = this.shitStrap.bind(this);
    this.flush = this.flush.bind(this);
    this.receive = this.receive.bind(this);
    this.refundShitter = this.refundShitter.bind(this);
  }

  shitStrap = ({
    shit
  }: {
    shit: AssetUnchecked;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          shit_strap: {
            shit
          }
        })),
        funds
      })
    };
  };
  flush = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          flush: {}
        })),
        funds
      })
    };
  };
  receive = ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive: {
            amount,
            msg,
            sender
          }
        })),
        funds
      })
    };
  };
  refundShitter = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          refund_shitter: {}
        })),
        funds
      })
    };
  };
}