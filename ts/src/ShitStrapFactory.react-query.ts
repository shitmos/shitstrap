/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, UncheckedDenom, Action, Expiration, Timestamp, Uint64, PossibleShit, QueryMsg, ArrayOfShitstrapContract, ShitstrapContract, Addr, OwnershipForAddr } from "./ShitStrapFactory.types";
import { ShitStrapFactoryQueryClient, ShitStrapFactoryClient } from "./ShitStrapFactory.client";
export const shitStrapFactoryQueryKeys = {
  contract: ([{
    contract: "shitStrapFactory"
  }] as const),
  address: (contractAddress: string) => ([{ ...shitStrapFactoryQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  listShitstrapContracts: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...shitStrapFactoryQueryKeys.address(contractAddress)[0],
    method: "list_shitstrap_contracts",
    args
  }] as const),
  listShitstrapContractsReverse: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...shitStrapFactoryQueryKeys.address(contractAddress)[0],
    method: "list_shitstrap_contracts_reverse",
    args
  }] as const),
  listShitstrapContractsByInstantiator: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...shitStrapFactoryQueryKeys.address(contractAddress)[0],
    method: "list_shitstrap_contracts_by_instantiator",
    args
  }] as const),
  listShitstrapContractsByInstantiatorReverse: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...shitStrapFactoryQueryKeys.address(contractAddress)[0],
    method: "list_shitstrap_contracts_by_instantiator_reverse",
    args
  }] as const),
  listShitstrapContractsByToken: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...shitStrapFactoryQueryKeys.address(contractAddress)[0],
    method: "list_shitstrap_contracts_by_token",
    args
  }] as const),
  listShitstrapContractsByTokenReverse: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...shitStrapFactoryQueryKeys.address(contractAddress)[0],
    method: "list_shitstrap_contracts_by_token_reverse",
    args
  }] as const),
  ownership: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...shitStrapFactoryQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const),
  codeId: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...shitStrapFactoryQueryKeys.address(contractAddress)[0],
    method: "code_id",
    args
  }] as const)
};
export const shitStrapFactoryQueries = {
  listShitstrapContracts: <TData = ArrayOfShitstrapContract,>({
    client,
    args,
    options
  }: ShitStrapFactoryListShitstrapContractsQuery<TData>): UseQueryOptions<ArrayOfShitstrapContract, Error, TData> => ({
    queryKey: shitStrapFactoryQueryKeys.listShitstrapContracts(client?.contractAddress, args),
    queryFn: () => client.listShitstrapContracts({
      limit: args.limit,
      startAfter: args.startAfter
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listShitstrapContractsReverse: <TData = ArrayOfShitstrapContract,>({
    client,
    args,
    options
  }: ShitStrapFactoryListShitstrapContractsReverseQuery<TData>): UseQueryOptions<ArrayOfShitstrapContract, Error, TData> => ({
    queryKey: shitStrapFactoryQueryKeys.listShitstrapContractsReverse(client?.contractAddress, args),
    queryFn: () => client.listShitstrapContractsReverse({
      limit: args.limit,
      startBefore: args.startBefore
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listShitstrapContractsByInstantiator: <TData = ArrayOfShitstrapContract,>({
    client,
    args,
    options
  }: ShitStrapFactoryListShitstrapContractsByInstantiatorQuery<TData>): UseQueryOptions<ArrayOfShitstrapContract, Error, TData> => ({
    queryKey: shitStrapFactoryQueryKeys.listShitstrapContractsByInstantiator(client?.contractAddress, args),
    queryFn: () => client.listShitstrapContractsByInstantiator({
      instantiator: args.instantiator,
      limit: args.limit,
      startAfter: args.startAfter
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listShitstrapContractsByInstantiatorReverse: <TData = ArrayOfShitstrapContract,>({
    client,
    args,
    options
  }: ShitStrapFactoryListShitstrapContractsByInstantiatorReverseQuery<TData>): UseQueryOptions<ArrayOfShitstrapContract, Error, TData> => ({
    queryKey: shitStrapFactoryQueryKeys.listShitstrapContractsByInstantiatorReverse(client?.contractAddress, args),
    queryFn: () => client.listShitstrapContractsByInstantiatorReverse({
      instantiator: args.instantiator,
      limit: args.limit,
      startBefore: args.startBefore
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listShitstrapContractsByToken: <TData = ArrayOfShitstrapContract,>({
    client,
    args,
    options
  }: ShitStrapFactoryListShitstrapContractsByTokenQuery<TData>): UseQueryOptions<ArrayOfShitstrapContract, Error, TData> => ({
    queryKey: shitStrapFactoryQueryKeys.listShitstrapContractsByToken(client?.contractAddress, args),
    queryFn: () => client.listShitstrapContractsByToken({
      limit: args.limit,
      recipient: args.recipient,
      startAfter: args.startAfter
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listShitstrapContractsByTokenReverse: <TData = ArrayOfShitstrapContract,>({
    client,
    args,
    options
  }: ShitStrapFactoryListShitstrapContractsByTokenReverseQuery<TData>): UseQueryOptions<ArrayOfShitstrapContract, Error, TData> => ({
    queryKey: shitStrapFactoryQueryKeys.listShitstrapContractsByTokenReverse(client?.contractAddress, args),
    queryFn: () => client.listShitstrapContractsByTokenReverse({
      limit: args.limit,
      recipient: args.recipient,
      startBefore: args.startBefore
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ownership: <TData = OwnershipForAddr,>({
    client,
    options
  }: ShitStrapFactoryOwnershipQuery<TData>): UseQueryOptions<OwnershipForAddr, Error, TData> => ({
    queryKey: shitStrapFactoryQueryKeys.ownership(client?.contractAddress),
    queryFn: () => client.ownership(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  codeId: <TData = Uint64,>({
    client,
    options
  }: ShitStrapFactoryCodeIdQuery<TData>): UseQueryOptions<Uint64, Error, TData> => ({
    queryKey: shitStrapFactoryQueryKeys.codeId(client?.contractAddress),
    queryFn: () => client.codeId(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface ShitStrapFactoryReactQuery<TResponse, TData = TResponse> {
  client: ShitStrapFactoryQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ShitStrapFactoryCodeIdQuery<TData> extends ShitStrapFactoryReactQuery<Uint64, TData> {}
export function useShitStrapFactoryCodeIdQuery<TData = Uint64>({
  client,
  options
}: ShitStrapFactoryCodeIdQuery<TData>) {
  return useQuery<Uint64, Error, TData>(shitStrapFactoryQueryKeys.codeId(client.contractAddress), () => client.codeId(), options);
}
export interface ShitStrapFactoryOwnershipQuery<TData> extends ShitStrapFactoryReactQuery<OwnershipForAddr, TData> {}
export function useShitStrapFactoryOwnershipQuery<TData = OwnershipForAddr>({
  client,
  options
}: ShitStrapFactoryOwnershipQuery<TData>) {
  return useQuery<OwnershipForAddr, Error, TData>(shitStrapFactoryQueryKeys.ownership(client.contractAddress), () => client.ownership(), options);
}
export interface ShitStrapFactoryListShitstrapContractsByTokenReverseQuery<TData> extends ShitStrapFactoryReactQuery<ArrayOfShitstrapContract, TData> {
  args: {
    limit?: number;
    recipient: string;
    startBefore?: string;
  };
}
export function useShitStrapFactoryListShitstrapContractsByTokenReverseQuery<TData = ArrayOfShitstrapContract>({
  client,
  args,
  options
}: ShitStrapFactoryListShitstrapContractsByTokenReverseQuery<TData>) {
  return useQuery<ArrayOfShitstrapContract, Error, TData>(shitStrapFactoryQueryKeys.listShitstrapContractsByTokenReverse(client.contractAddress, args), () => client.listShitstrapContractsByTokenReverse({
    limit: args.limit,
    recipient: args.recipient,
    startBefore: args.startBefore
  }), options);
}
export interface ShitStrapFactoryListShitstrapContractsByTokenQuery<TData> extends ShitStrapFactoryReactQuery<ArrayOfShitstrapContract, TData> {
  args: {
    limit?: number;
    recipient: string;
    startAfter?: string;
  };
}
export function useShitStrapFactoryListShitstrapContractsByTokenQuery<TData = ArrayOfShitstrapContract>({
  client,
  args,
  options
}: ShitStrapFactoryListShitstrapContractsByTokenQuery<TData>) {
  return useQuery<ArrayOfShitstrapContract, Error, TData>(shitStrapFactoryQueryKeys.listShitstrapContractsByToken(client.contractAddress, args), () => client.listShitstrapContractsByToken({
    limit: args.limit,
    recipient: args.recipient,
    startAfter: args.startAfter
  }), options);
}
export interface ShitStrapFactoryListShitstrapContractsByInstantiatorReverseQuery<TData> extends ShitStrapFactoryReactQuery<ArrayOfShitstrapContract, TData> {
  args: {
    instantiator: string;
    limit?: number;
    startBefore?: string;
  };
}
export function useShitStrapFactoryListShitstrapContractsByInstantiatorReverseQuery<TData = ArrayOfShitstrapContract>({
  client,
  args,
  options
}: ShitStrapFactoryListShitstrapContractsByInstantiatorReverseQuery<TData>) {
  return useQuery<ArrayOfShitstrapContract, Error, TData>(shitStrapFactoryQueryKeys.listShitstrapContractsByInstantiatorReverse(client.contractAddress, args), () => client.listShitstrapContractsByInstantiatorReverse({
    instantiator: args.instantiator,
    limit: args.limit,
    startBefore: args.startBefore
  }), options);
}
export interface ShitStrapFactoryListShitstrapContractsByInstantiatorQuery<TData> extends ShitStrapFactoryReactQuery<ArrayOfShitstrapContract, TData> {
  args: {
    instantiator: string;
    limit?: number;
    startAfter?: string;
  };
}
export function useShitStrapFactoryListShitstrapContractsByInstantiatorQuery<TData = ArrayOfShitstrapContract>({
  client,
  args,
  options
}: ShitStrapFactoryListShitstrapContractsByInstantiatorQuery<TData>) {
  return useQuery<ArrayOfShitstrapContract, Error, TData>(shitStrapFactoryQueryKeys.listShitstrapContractsByInstantiator(client.contractAddress, args), () => client.listShitstrapContractsByInstantiator({
    instantiator: args.instantiator,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface ShitStrapFactoryListShitstrapContractsReverseQuery<TData> extends ShitStrapFactoryReactQuery<ArrayOfShitstrapContract, TData> {
  args: {
    limit?: number;
    startBefore?: string;
  };
}
export function useShitStrapFactoryListShitstrapContractsReverseQuery<TData = ArrayOfShitstrapContract>({
  client,
  args,
  options
}: ShitStrapFactoryListShitstrapContractsReverseQuery<TData>) {
  return useQuery<ArrayOfShitstrapContract, Error, TData>(shitStrapFactoryQueryKeys.listShitstrapContractsReverse(client.contractAddress, args), () => client.listShitstrapContractsReverse({
    limit: args.limit,
    startBefore: args.startBefore
  }), options);
}
export interface ShitStrapFactoryListShitstrapContractsQuery<TData> extends ShitStrapFactoryReactQuery<ArrayOfShitstrapContract, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useShitStrapFactoryListShitstrapContractsQuery<TData = ArrayOfShitstrapContract>({
  client,
  args,
  options
}: ShitStrapFactoryListShitstrapContractsQuery<TData>) {
  return useQuery<ArrayOfShitstrapContract, Error, TData>(shitStrapFactoryQueryKeys.listShitstrapContracts(client.contractAddress, args), () => client.listShitstrapContracts({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface ShitStrapFactoryUpdateOwnershipMutation {
  client: ShitStrapFactoryClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useShitStrapFactoryUpdateOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ShitStrapFactoryUpdateOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ShitStrapFactoryUpdateOwnershipMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwnership(msg, fee, memo, funds), options);
}
export interface ShitStrapFactoryUpdateCodeIdMutation {
  client: ShitStrapFactoryClient;
  msg: {
    shitstrapCodeId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useShitStrapFactoryUpdateCodeIdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ShitStrapFactoryUpdateCodeIdMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ShitStrapFactoryUpdateCodeIdMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateCodeId(msg, fee, memo, funds), options);
}
export interface ShitStrapFactoryCreateNativeShitStrapContractMutation {
  client: ShitStrapFactoryClient;
  msg: {
    instantiateMsg: InstantiateMsg;
    label: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useShitStrapFactoryCreateNativeShitStrapContractMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ShitStrapFactoryCreateNativeShitStrapContractMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ShitStrapFactoryCreateNativeShitStrapContractMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createNativeShitStrapContract(msg, fee, memo, funds), options);
}